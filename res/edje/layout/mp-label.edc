/* 
* Copyright (c) 2000-2015 Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License"); 
* you may not use this file except in compliance with the License. 
* You may obtain a copy of the License at 
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, 
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
* See the License for the specific language governing permissions and 
* limitations under the License. 
* 
*/

#define MP_LABEL_TITLE_STYLE_COLOR_INC "#808080"
#define MP_LABEL_SUBTITLE_TEXT_COLOR_INC 128 128 128 255
#define NAVIFRAME_TITLE_BLACK_FONT_SIZE_INC 50
#define NAVIFRAME_TITLE_BLACK_STYLE_COLOR_INC "#ffffff"
#define NAVIFRAME_SUBTITLE_BLACK_STYLE_COLOR_INC "#979797"
#define SLIDE_SPEED_WEIGHT 0.5
#define SLIDE_TEXT_GAP 60
	styles {
         style { name: "textblock_style";
            base: "font=Tizen:style=Medium font_size=28 color=#FFFFFF80 align=left";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
         style { name: "naviframe_title_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_TITLE_FONT_SIZE_INC" color="NAVIFRAME_TITLE_STYLE_COLOR_INC"";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
		 style { name: "naviframe_maintitle_black_style";
            base: "font=Tizen:style=Bold font_size="NAVIFRAME_TITLE_BLACK_FONT_SIZE_INC" color="NAVIFRAME_TITLE_BLACK_STYLE_COLOR_INC" align=center";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
         style { name: "naviframe_maintitle_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_TITLE_SMALL_FONT_SIZE_INC" color="NAVIFRAME_TITLE_STYLE_COLOR_INC"";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
		 style { name: "naviframe_subtitle_black_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_SUBTITLE_FONT_SIZE_INC" color="NAVIFRAME_SUBTITLE_BLACK_STYLE_COLOR_INC" align=center";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
         style { name: "naviframe_subtitle_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_SUBTITLE_FONT_SIZE_INC" color="MP_LABEL_TITLE_STYLE_COLOR_INC"";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
         style { name: "naviframe_landscape_title_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC" color="NAVIFRAME_TITLE_STYLE_COLOR_INC"";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
		 style { name: "naviframe_landscape_maintitle_black_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_TITLE_BLACK_FONT_SIZE_INC" color="NAVIFRAME_TITLE_BLACK_STYLE_COLOR_INC"  align=center";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
         style { name: "naviframe_landscape_maintitle_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_LANDSCAPE_TITLE_SMALL_FONT_SIZE_INC" color="NAVIFRAME_TITLE_STYLE_COLOR_INC"";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
		 style { name: "naviframe_landscape_subtitle_black_style";
			 base: "font=Tizen:style=Medium font_size="NAVIFRAME_LANDSCAPE_SUBTITLE_FONT_SIZE_INC" color="NAVIFRAME_SUBTITLE_BLACK_STYLE_COLOR_INC" align=center";
			 tag:  "br" "\n";
			 tag:  "ps" "ps";
			 tag:  "hilight" "+ font=Tizen:style=Bold";
			 tag:  "b" "+ font=Tizen:style=Bold";
			 tag:  "tab" "\t";
		}
         style { name: "naviframe_landscape_subtitle_style";
            base: "font=Tizen:style=Medium font_size="NAVIFRAME_LANDSCAPE_SUBTITLE_FONT_SIZE_INC" color="MP_LABEL_TITLE_STYLE_COLOR_INC"";
            tag:  "br" "\n";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font=Tizen:style=Bold";
            tag:  "b" "+ font=Tizen:style=Bold";
            tag:  "tab" "\t";
         }
         style { name: "main_title_style";
            base: "font=Tizen:style=Medium font_size=21 align=left color=#FFFFFF";
            tag:  "ps" "ps";
            tag:  "hilight" "+ font_weight=Bold";
            tag:  "b" "+ font_weight=Bold";
            tag:  "tab" "\t";
	    tag:  "match_artist" "+ font_size=16 color=#FFFFFF";
	    tag:  "match_album" "+ font_size=16 color=#FFFFFF";
         }
      }

	group { name: "elm/label/base/music/naviframe_title";
         script {
            public g_duration = 0, g_stopslide, g_timer_id, g_anim_id, g_landscape = 0;

            public message(Msg_Type:type, id, ...) {
               if (type == MSG_FLOAT_SET) {
                  new Float:duration;
                  duration = getfarg(2);
                  if (id == 0)
                    set_float(g_duration, duration);
                  else {
                     if (!get_int(g_landscape))
                       set_float(g_duration, duration / NAVIFRAME_TITLE_FONT_SIZE_INC * SLIDE_SPEED_WEIGHT);
                     else
                       set_float(g_duration, duration / NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC * SLIDE_SPEED_WEIGHT);
                  }
               }
            }
            public slide_end_pending(val, Float:pos) {
               if (pos >= 1.0) {
                  stop_slide();
                  emit("elm,state,slide,end", "");
               }
            }
            public slide_to_end_anim(val, Float:pos) {
               new stopflag;
               stopflag = get_int(g_stopslide);
               if (stopflag == 1) return;
               if (!get_int(g_landscape))
                 set_tween_state(PART:"elm.text", pos, "slide_begin", 0.0, "slide_end", 0.0);
               else
                 set_tween_state(PART:"elm.text", pos, "slide_begin_landscape", 0.0, "slide_end_landscape", 0.0);
               if (pos >= 1.0)
                 anim(1, "slide_end_pending", 1);
            }
            public slide_to_end() {
               new stopflag;
               new id;
               new Float:duration;
               stopflag = get_int(g_stopslide);
               if (stopflag == 1) return;
               duration = get_float(g_duration);
               id = anim(duration, "slide_to_end_anim", 1);
               set_int(g_anim_id, id);
            }
            public slide_to_begin() {
               new stopflag;
               new id;
               stopflag = get_int(g_stopslide);
               if (stopflag == 1) return;
               if (!get_int(g_landscape))
                 set_state(PART:"elm.text", "slide_begin", 0.0);
               else
                 set_state(PART:"elm.text", "slide_begin_landscape", 0.0);
               id = timer(0.5, "slide_to_end", 1);
               set_int(g_timer_id, id);
            }
            public start_slide() {
               set_int(g_stopslide, 0);
               if (!get_int(g_landscape))
                 set_state(PART:"elm.text", "slide_begin", 0.0);
               else
                 set_state(PART:"elm.text", "slide_begin_landscape", 0.0);
               slide_to_end();
            }
            public stop_slide() {
               new id;
               set_int(g_stopslide, 1);
               id = get_int(g_anim_id);
               cancel_anim(id);
               id = get_int(g_timer_id);
               cancel_timer(id);
               if (!get_int(g_landscape))
                 set_state(PART:"elm.text", "default", 0.0);
               else
                 set_state(PART:"elm.text", "default_landscape", 0.0);
            }
         }
         parts {
            part { name: "label.text.clip";
               type: RECT;
               description { state: "default" 0.0;
               }
            }
            part { name: "elm.text";
               type: TEXTBLOCK;
               scale: 1;
               clip_to: "label.text.clip";
               description { state: "default" 0.0;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 1.0 1.0;
                  align: 0.0 0.0;
                  text {
                     style: "naviframe_title_style";
                     size: NAVIFRAME_TITLE_FONT_SIZE_INC;
                     size_range: NAVIFRAME_TITLE_FONT_MIN_SIZE_INC NAVIFRAME_TITLE_FONT_SIZE_INC;
                     fit: 1 0;
                     min: 0 1;
                  }
               }
               description { state: "slide_end" 0.0;
                  inherit: "default" 0.0;
                  rel1.relative: 1.0 0.0;
                  rel2.relative: 1.0 1.0;
                  align: 1.0 0.0;
                  text {
                     style: "naviframe_title_style";
                     size: NAVIFRAME_TITLE_FONT_SIZE_INC;
                     size_range: NAVIFRAME_TITLE_FONT_MIN_SIZE_INC NAVIFRAME_TITLE_FONT_SIZE_INC;
                     fit: 1 0;
                     min: 1 1;
                  }
               }
               description { state: "slide_begin" 0.0;
                  inherit: "default" 0.0;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 0.0 1.0;
                  align: 0.0 0.0;
                  text {
                     style: "naviframe_title_style";
                     size: NAVIFRAME_TITLE_FONT_SIZE_INC;
                     size_range: NAVIFRAME_TITLE_FONT_MIN_SIZE_INC NAVIFRAME_TITLE_FONT_SIZE_INC;
                     fit: 1 0;
                     min: 1 1;
                  }
               }
               description { state: "default_landscape" 0.0;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 1.0 1.0;
                  align: 0.0 0.0;
                  text {
                     style: "naviframe_landscape_title_style";
                     size: NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC;
                     size_range: NAVIFRAME_TITLE_FONT_MIN_SIZE_INC NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC;
                     fit: 1 0;
                     min: 0 1;
                  }
               }
               description { state: "slide_end_landscape" 0.0;
                  inherit: "default" 0.0;
                  rel1.relative: 1.0 0.0;
                  rel2.relative: 1.0 1.0;
                  align: 1.0 0.0;
                  text {
                     style: "naviframe_landscape_title_style";
                     size: NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC;
                     size_range: NAVIFRAME_TITLE_FONT_MIN_SIZE_INC NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC;
                     fit: 1 0;
                     min: 1 1;
                  }
               }
               description { state: "slide_begin_landscape" 0.0;
                  inherit: "default" 0.0;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 0.0 1.0;
                  align: 0.0 0.0;
                  text {
                     style: "naviframe_landscape_title_style";
                     size: NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC;
                     size_range: NAVIFRAME_TITLE_FONT_MIN_SIZE_INC NAVIFRAME_LANDSCAPE_TITLE_FONT_SIZE_INC;
                     fit: 1 0;
                     min: 1 1;
                  }
               }
            }
         }
         programs {
            program { name: "start_slide";
               source: "elm";
               signal: "elm,state,slide,start";
               script {
                  start_slide();
               }
            }
            program { name: "stop_slide";
               source: "elm";
               signal: "elm,state,slide,stop";
               script {
                  stop_slide();
               }
            }
            program { name: "landscape_mode";
               source: "elm";
               signal: "elm,state,orient,90";
               script {
                  set_int(g_landscape, 1);
               }
            }
            program { name: "landscape_mode2";
               source: "elm";
               signal: "elm,state,orient,270";
               script {
                  set_int(g_landscape, 1);
               }
            }
            program { name: "portrait_mode";
               source: "elm";
               signal: "elm,state,orient,0";
               script {
                  set_int(g_landscape, 0);
               }
            }
            program { name: "portrait_mode2";
               source: "elm";
               signal: "elm,state,orient,180";
               script {
                  set_int(g_landscape, 0);
               }
            }
         }
      }

      group { name: "elm/label/base/music/slide_roll";
      script {
            public g_duration = 0;
            public g_stopslide = 0;
            public g_timer_id = 0;
            public g_anim_id = 0;
            public g_tb_w = 0;
            public g_tb_h = LABEL_FONT_SIZE_INC;
            public org_text = 0;
            public message(Msg_Type:type, id, ...) {
               if (type == MSG_FLOAT_SET) {
                  new Float:duration;
                  duration = getfarg(2);
                  if (id == 0)
                    set_float(g_duration, duration);
                  else
                    set_float(g_duration, duration / get_int(g_tb_h) * SLIDE_SPEED_WEIGHT);
               }
            }
            public get_tb_width() {
               new x, y, w, h;
               set_state(PART:"elm.text", "no_ellipsis", 0.0);
               get_geometry(PART:"elm.text", x, y, w, h);
               set_int(g_tb_w, w);
               set_int(g_tb_h, h);
               set_state(PART:"text_clip", "default", 0.0);
               get_geometry(PART:"text_clip", x, y, w, h);
               set_int(org_text, w);
            }
            public slide_to_end_anim(val, Float:pos) {
               if (get_int(g_stopslide)) return;
               set_tween_state(PART:"elm.text.slide", pos, "slide_begin", 0.0, "slide_end", 0.0);
               set_tween_state(PART:"elm.text.slide2", pos, "slide_begin", 0.0, "slide_end", 0.0);
               if (pos >= 1.0) {
                  set_int(g_timer_id, timer(1.5, "start_slide", 0));
               }
            }
            public slide_to_end() {
               if (get_int(g_stopslide)) return;
               set_int(g_anim_id, anim(get_float(g_duration), "slide_to_end_anim", 0));
            }
            public start_slide(val) {
               new Float:len;
               new buf[1024];
               set_int(g_stopslide, 0);
               get_tb_width();
               if (!get_float(g_duration)) {
                  len = get_int(g_tb_w) + SLIDE_TEXT_GAP;
                  set_float(g_duration, len / get_int(g_tb_h) * SLIDE_SPEED_WEIGHT);
               }
               if(get_int(g_tb_w) > get_int(org_text)) {
                  set_state(PART:"elm.text.slide", "slide_begin", 0.0);
                  set_state(PART:"elm.text.slide2", "slide_begin", 0.0);
                  get_text(PART:"elm.text", buf, 1024);
                  set_text(PART:"elm.text.slide", buf);
                  set_text(PART:"elm.text.slide2", buf);
                  set_state(PART:"text_clip", "hide", 0.0);
                  set_state(PART:"slide_text_clip", "show", 0.0);
                  slide_to_end();
               }
            }
            public stop_slide() {
               new slide_start_timer;
               new slide_anim_id;
               set_int(g_stopslide, 1);
               set_float(g_duration, 0);
               slide_start_timer = get_int(g_timer_id);
               if (slide_start_timer) {
                  cancel_timer(slide_start_timer);
                  set_int(g_timer_id, 0);
               }
               slide_anim_id = get_int(g_anim_id);
               if (slide_anim_id) {
                  cancel_anim(slide_anim_id);
                  set_int(g_anim_id, 0);
               }
               set_text(PART:"elm.text.slide", "");
               set_text(PART:"elm.text.slide2", "");
               set_state(PART:"elm.text", "default", 0.0);
               set_state(PART:"elm.text.slide", "default", 0.0);
               set_state(PART:"elm.text.slide2", "default", 0.0);
               set_state(PART:"text_clip", "default", 0.0);
               set_state(PART:"slide_text_clip", "default", 0.0);
            }
         }
         parts {
            part { name: "label.text.clip";
               type: RECT;
               description { state: "default" 0.0;
               }
            }
            part { name: "text_clip";
               type: RECT;
               mouse_events: 0;
               clip_to: "label.text.clip";
               description { state: "default" 0.0;
               }
               description { state: "hide" 0.0;
                  inherit: "default" 0.0;
                  visible: 0;
               }
            }
            part { name: "elm.text";
               type: TEXTBLOCK;
               scale: 1;
               clip_to: "text_clip";
               description { state: "default" 0.0;
                  align: 0.0 0.5;
                  text {
                     style: "main_title_style";
                     min: 0 1;
                  }
               }
               description { state: "no_ellipsis" 0.0;
                  inherit: "default" 0.0;
                  text.min: 1 1;
               }
            }
            part { name: "slide_text_clip";
               type: RECT;
               mouse_events: 0;
               clip_to: "label.text.clip";
               description { state: "default" 0.0;
                  visible: 0;
               }
               description { state: "show" 0.0;
                  inherit: "default" 0.0;
                  visible: 1;
               }
            }
            part { name: "slide_text_gap";
               type: SPACER;
               scale: 1;
               description { state: "default" 0.0;
                  fixed: 1 0;
                  min: SLIDE_TEXT_GAP 0;
                  max: SLIDE_TEXT_GAP -1;
                  align: 1.0 0.5;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 0.0 1.0;
               }
            }
            part { name: "elm.text.slide";
               type: TEXTBLOCK;
               scale: 1;
               clip_to: "slide_text_clip";
               description { state: "default" 0.0;
                  align: 0.0 0.5;
                  text {
                     style: "main_title_style";
                     min: 0 1;
                  }
               }
               description { state: "slide_begin" 0.0;
                  inherit: "default" 0.0;
                  text.min: 1 1;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 0.0 1.0;
               }
               description { state: "slide_end" 0.0;
                  inherit: "default" 0.0;
                  align: 1.0 0.5;
                  text.min: 1 1;
                  text.align: 1.0 0.5;
                  rel1 { relative: 0.0 0.0; to: "slide_text_gap"; }
                  rel2 { relative: 0.0 1.0; to: "slide_text_gap"; }
               }
            }
            part { name: "slide_text_gap2";
               type: SPACER;
               scale: 1;
               description { state: "default" 0.0;
                  fixed: 1 0;
                  min: SLIDE_TEXT_GAP 0;
                  max: SLIDE_TEXT_GAP -1;
                  align: 0.0 0.5;
                  rel1 { relative: 1.0 0.0; to: "elm.text"; }
                  rel2 { relative: 1.0 1.0; to: "elm.text"; }
               }
            }
            part { name: "elm.text.slide2";
               type: TEXTBLOCK;
               scale: 1;
               clip_to: "slide_text_clip";
               description { state: "default" 0.0;
                  align: 0.0 0.5;
                  text {
                     style: "main_title_style";
                     min: 1 1;
                  }
               }
               description { state: "slide_begin" 0.0;
                  inherit: "default" 0.0;
                  rel1 { relative: 1.0 0.0; to: "slide_text_gap2"; }
                  rel2 { relative: 1.0 1.0; to: "slide_text_gap2"; }
               }
               description { state: "slide_end" 0.0;
                  inherit: "default" 0.0;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 0.0 1.0;
               }
            }
         }
         programs {
            program { name: "start_slide";
               source: "elm";
               signal: "elm,state,slide,start";
               script {
                  run_program(PROGRAM:"stop_slide");
                  set_int(g_timer_id, timer(1.5, "start_slide", 0));
               }
            }
            program { name: "stop_slide";
               source: "elm";
               signal: "elm,state,slide,stop";
               script {
                  stop_slide();
               }
            }
         }
      }
   group { name: "elm/label/base/music/slide_short_minicontroller";
         script {
            public g_duration = 0, g_stopslide, g_timer_id, g_anim_id;

            public message(Msg_Type:type, id, ...) {
               if (type == MSG_FLOAT_SET) {
                  new Float:duration;
                  duration = getfarg(2);
                  if (id == 0)
                    set_float(g_duration, duration);
                  else
                    set_float(g_duration, duration / LABEL_FONT_SIZE_INC * SLIDE_SPEED_WEIGHT);
               }
           }
            public slide_to_end_anim(val, Float:pos) {
               new stopflag;
               new id;
               stopflag = get_int(g_stopslide);
               if (stopflag == 1) return;
               set_tween_state(PART:"elm.text", pos, "slide_begin", 0.0, "slide_end", 0.0);
               if (pos >= 1.0) {
                  id = timer(0.5, "slide_to_begin", 1);
                  set_int(g_timer_id, id);
               }
            }
            public slide_to_end() {
               new stopflag;
               new id;
               new Float:duration;
               stopflag = get_int(g_stopslide);
               if (stopflag == 1) return;
               duration = get_float(g_duration);
               id = anim(duration, "slide_to_end_anim", 1);
               set_int(g_anim_id, id);
            }
            public slide_to_begin() {
               new stopflag;
               new id;
               stopflag = get_int(g_stopslide);
               if (stopflag == 1) return;
               set_state(PART:"elm.text", "slide_begin", 0.0);
               id = timer(0.5, "slide_to_end", 1);
               set_int(g_timer_id, id);
            }
            public start_slide() {
               set_int(g_stopslide, 0);
               set_state(PART:"elm.text", "slide_begin", 0.0);
               slide_to_end();
            }
            public stop_slide() {
               new id;
               set_int(g_stopslide, 1);
               id = get_int(g_anim_id);
               cancel_anim(id);
               id = get_int(g_timer_id);
               cancel_timer(id);
               set_state(PART:"elm.text", "default", 0.0);
            }
         }

         parts {
            part { name: "label.text.clip";
               type: RECT;
               description { state: "default" 0.0;
               }
            }
            part { name: "elm.text";
               type: TEXTBLOCK;
               scale: 1;
               clip_to: "label.text.clip";
               description { state: "default" 0.0;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 1.0 1.0;
                  align: 0.0 0.0;
                  text {
                     style: "textblock_style";
                     min: 0 1;
                     align: 0.0 0.0;
                  }
               }
               description { state: "slide_end" 0.0;
                  inherit: "default" 0.0;
                  rel1.relative: 1.0 0.0;
                  rel2.relative: 1.0 1.0;
                  align: 1.0 0.0;
                  text {
                     style: "textblock_style";
                     min: 1 1;
                     align: 0.0 0.0;
                  }
               }
               description { state: "slide_begin" 0.0;
                  inherit: "default" 0.0;
                  rel1.relative: 0.0 0.0;
                  rel2.relative: 0.0 1.0;
                  align: 0.0 0.0;
                  text {
                     style: "textblock_style";
                     min: 1 1;
                     align: 0.0 0.0;
                  }
               }
            }
         }
         programs {
            program { name: "start_slide";
               source: "elm";
               signal: "elm,state,slide,start";
               script {
                  start_slide();
               }
            }
            program { name: "stop_slide";
               source: "elm";
               signal: "elm,state,slide,stop";
               script {
                  stop_slide();
               }
            }
         }
      }
